Imports Components
Imports DataLayer
Imports System.Data
Imports System.Linq

Partial Class rebates_builder_purchases
    Inherits SitePage

    Private ReadOnly Property Now() As DateTime
        Get
            Dim param As String = SysParam.GetValue(DB, "DemoReportingDate")
            If param = Nothing OrElse param = "0" Then
                Return DateTime.Now
            Else
                Return param
            End If
        End Get
    End Property

#Region "Properties"
    Private ReadOnly Property CurrentQuarter() As Integer
        Get
            Return Math.Ceiling(DatePart(DateInterval.Month, Now) / 3)
        End Get
    End Property

    Private ReadOnly Property CurrentYear() As Integer
        Get
            Return DatePart(DateInterval.Year, Now)
        End Get
    End Property

    Private ReadOnly Property LastQuarter() As Integer
        Get
            Return IIf(CurrentQuarter - 1 = 0, 4, CurrentQuarter - 1)
        End Get
    End Property

    Private ReadOnly Property LastYear() As Integer
        Get
            Return IIf(LastQuarter = 4, CurrentYear - 1, CurrentYear)
        End Get
    End Property

    Private m_ResponseDeadline As DateTime
    Private ReadOnly Property ResponseDeadline() As DateTime
        Get
            If m_ResponseDeadline = Nothing Then
                Dim LastQuarterEnd As DateTime = (LastQuarter * 3) & "/" & Date.DaysInMonth(LastYear, LastQuarter * 3) & "/" & LastYear
                m_ResponseDeadline = GetDeadline(LastQuarterEnd)
            End If
            Return m_ResponseDeadline
        End Get
    End Property

    Private Property ReportQuarter() As Integer
        Get
            Return ViewState("ReportQuarter")
        End Get
        Set(ByVal value As Integer)
            ViewState("ReportQuarter") = value
            If m_dbPurchasesReport IsNot Nothing AndAlso ViewState("ReportQuarter") <> m_dbPurchasesReport.PeriodQuarter Then
                dbPurchasesReport = Nothing
            End If
        End Set
    End Property

    Private Property ReportYear() As Integer
        Get
            Return ViewState("ReportYear")
        End Get
        Set(ByVal value As Integer)
            ViewState("ReportYear") = value
            If m_dbPurchasesReport IsNot Nothing AndAlso ViewState("ReportYear") <> m_dbPurchasesReport.PeriodYear Then
                dbPurchasesReport = Nothing
            End If
        End Set
    End Property

    Private m_dbPurchasesReport As PurchasesReportRow
    Private Property dbPurchasesReport() As PurchasesReportRow
        Get
            If m_dbPurchasesReport Is Nothing OrElse (m_dbPurchasesReport.PeriodQuarter <> ReportQuarter Or m_dbPurchasesReport.PeriodYear <> ReportYear) Then
                m_dbPurchasesReport = PurchasesReportRow.GetPurchasesReportByPeriod(DB, Session("BuilderId"), ReportYear, ReportQuarter)
                If m_dbPurchasesReport.Created = Nothing Then
                    m_dbPurchasesReport.BuilderID = Session("BuilderId")
                    m_dbPurchasesReport.PeriodQuarter = ReportQuarter
                    m_dbPurchasesReport.PeriodYear = ReportYear
                    m_dbPurchasesReport.CreatorBuilderAccountID = Session("BuilderAccountID")
                    m_dbPurchasesReport.Insert()
                End If
            End If
            Return m_dbPurchasesReport
        End Get
        Set(ByVal value As PurchasesReportRow)
            m_dbPurchasesReport = value
            m_dtTotals = Nothing
            m_dtPurchases = Nothing
        End Set
    End Property

    Private m_dtTotals As DataTable
    Private Property dtTotals() As DataTable
        Get
            If m_dtTotals Is Nothing Then
                m_dtTotals = PurchasesReportRow.GetVendors(DB, dbPurchasesReport.PurchasesReportID)
            End If
            Return m_dtTotals
        End Get
        Set(ByVal value As DataTable)
            m_dtTotals = value
        End Set
    End Property

    Private m_dtVendors As DataTable
    Private ReadOnly Property dtVendors() As DataTable
        Get
            If m_dtVendors Is Nothing Then
                m_dtVendors = BuilderRow.GetAllVendors(DB, Session("BuilderId"))
            End If
            Return m_dtVendors
        End Get
    End Property

    Private m_dtPurchases As DataTable
    Private m_dvPurchases As DataView
    Private ReadOnly Property dvPurchases() As DataView
        Get
            If m_dvPurchases Is Nothing Or m_dtPurchases Is Nothing Then
                If m_dtPurchases Is Nothing Then
                    m_dtPurchases = PurchasesReportRow.GetPurchases(DB, dbPurchasesReport.PurchasesReportID)
                End If
                m_dvPurchases = m_dtPurchases.DefaultView
                m_dvPurchases.Sort = "VendorID"
            End If
            Return m_dvPurchases
        End Get
    End Property

    Private m_VendorIds As Generic.List(Of Integer)
    Private ReadOnly Property VendorIds() As Generic.List(Of Integer)
        Get
            If m_VendorIds Is Nothing Then
                m_VendorIds = New Generic.List(Of Integer)
                m_VendorIds.AddRange((From row As DataRow In dtVendors.AsEnumerable Select CInt(row("VendorId"))).DefaultIfEmpty)
            End If
            Return m_VendorIds
        End Get
    End Property

    Private Property EditMode() As Boolean
        Get
            Return ViewState("EditMode")
        End Get
        Set(ByVal value As Boolean)
            ViewState("EditMode") = value
        End Set
    End Property

    Private Property EditIndex() As Integer
        Get
            Return ViewState("EditIndex")
        End Get
        Set(ByVal value As Integer)
            ViewState("EditIndex") = value
        End Set
    End Property

    Private Property PurchaseEditID() As Integer
        Get
            Return ViewState("PurchaseEditID")
        End Get
        Set(ByVal value As Integer)
            ViewState("PurchaseEditID") = value
        End Set
    End Property

    Private m_Keys As Generic.List(Of String)
    Public ReadOnly Property Keys() As Generic.List(Of String)
        Get
            If m_Keys Is Nothing Then
                m_Keys = New Generic.List(Of String)
            End If
            Return m_Keys
        End Get
    End Property
#End Region

    Protected Overrides Function SaveViewState() As Object
        Dim base As Object = MyBase.SaveViewState
        Dim mystate As String = String.Empty
        If Keys.Count > 0 Then
            mystate = Keys.Aggregate(Function(sum, append) sum & IIf(sum = String.Empty, append, "," & append))
        End If
        Return IIf(base Is Nothing, mystate, New Pair(base, mystate))
    End Function

    Protected Overrides Sub LoadViewState(ByVal savedState As Object)
        Dim mystate As String
        If TypeOf savedState Is Pair Then
            Dim state As Pair = DirectCast(savedState, Pair)
            MyBase.LoadViewState(state.First)
            mystate = DirectCast(state.Second, String)
        Else
            mystate = DirectCast(savedState, String)
        End If
        Keys.Clear()
        For Each key As String In mystate.Split(",")
            Keys.Add(key)
        Next
    End Sub

    Private Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        EnsureBuilderAccess()

        Dim sm As ScriptManager = ScriptManager.GetCurrent(Page)

        sm.RegisterAsyncPostBackControl(hdnPostback)

        If Not IsPostBack And Not sm.IsInAsyncPostBack Then
            EditMode = True
            If ResponseDeadline < Now Then
                rblQuarter.Visible = False

                ltlCurrentQuarter.Visible = True
                ltlCurrentQuarter.Text = "Quarter " & CurrentQuarter & ", " & CurrentYear
                pSubmit.Visible = False

                ReportQuarter = CurrentQuarter
                ReportYear = CurrentYear
            Else
                Dim dbLastReport As PurchasesReportRow = PurchasesReportRow.GetPurchasesReportByPeriod(DB, Session("BuilderId"), LastYear, LastQuarter)

                rblQuarter.Visible = True
                rblQuarter.Items.Add(New ListItem("Purchases Invoiced During Quarter " & LastQuarter & ", " & LastYear, LastQuarter & "/" & LastYear))
                rblQuarter.Items.Add(New ListItem("Purchases Invoiced During Quarter " & CurrentQuarter & ", " & CurrentYear, CurrentQuarter & "/" & CurrentYear))

                'If dbLastReport.Submitted <> Nothing Then
                '    ReportQuarter = CurrentQuarter
                '    ReportYear = CurrentYear
                '    rblQuarter.SelectedIndex = 1
                '    pSubmit.Visible = False
                '    ltlDeadline.Text = "(Deadline: " & FormatDateTime(ResponseDeadline, DateFormat.ShortDate) & ")"
                '    btnSubmit.Text = "Edit Quarter " & LastQuarter & " " & IIf(LastQuarter < 4, ReportYear, ReportYear - 1) & " Purchases Report"
                'Else
                '    'default to last qtr report if not submitted yet
                '    dbPurchasesReport = dbLastReport
                '    ReportQuarter = LastQuarter
                '    ReportYear = LastYear
                '    rblQuarter.SelectedIndex = 0
                '    pSubmit.Visible = True
                '    ltlDeadline.Text = "(Deadline: " & FormatDateTime(ResponseDeadline, DateFormat.ShortDate) & ")"
                '    btnSubmit.Text = "Submit Final Quarter " & LastQuarter & " " & IIf(LastQuarter < 4, ReportYear, ReportYear - 1) & " Purchases Report"
                'End If

                ReportQuarter = LastQuarter
                ReportYear = LastYear
                rblQuarter.SelectedIndex = 0
                pSubmit.Visible = True
                If dbLastReport.Submitted <> Nothing Then
                    ltlDeadline.Text = "(Deadline: " & FormatDateTime(ResponseDeadline, DateFormat.ShortDate) & ")"
                    btnSubmit.Text = "Edit Quarter " & LastQuarter & " " & LastYear & " Purchases Report"
                Else
                    ltlDeadline.Text = "(Deadline: " & FormatDateTime(ResponseDeadline, DateFormat.ShortDate) & ")"
                    btnSubmit.Text = "Submit Final Quarter " & LastQuarter & " " & LastYear & " Purchases Report"
                End If

                ltlCurrentQuarter.Visible = False
            End If

            EditIndex = -1

            BindUnreported()
            BindReported()
        End If
    End Sub

    Private Function GetDeadline(ByVal QuarterEnd As DateTime) As DateTime
        'Dim deadline As DateTime = DateAdd(DateInterval.Day, 30, QuarterEnd)
        Dim deadline As DateTime = SysParam.GetValue(DB, "CurrentReportingDeadline")
        deadline = AddBusinessDays(deadline, SysParam.GetValue(DB, "ReportDeadlineDays"))
        deadline = AddBusinessDays(deadline, SysParam.GetValue(DB, "DiscrepancyDeadlineDays"))
        deadline = AddBusinessDays(deadline, SysParam.GetValue(DB, "DiscrepancyResponseDeadlineDays"))
        Return deadline
    End Function

    Private Function AddBusinessDays(ByVal start As DateTime, ByVal days As Integer) As DateTime
        Dim EndDay As Integer = DatePart(DateInterval.Weekday, DateAdd(DateInterval.Day, days, start))

        Dim quot As Integer = Math.Floor(days / 7)
        Dim remain As Integer = days Mod 7
        days += 2 * quot
        If remain > 0 Then
            Select Case start.DayOfWeek
                Case 1
                    days += IIf(remain = 6, 2, 1)
                Case 7
                    days += IIf(remain = 1, 1, 2)
                Case Else
                    If start.DayOfWeek + remain = 7 Then
                        days += 1
                    ElseIf (start.DayOfWeek + remain) Mod 7 < start.DayOfWeek Then
                        days += 2
                    End If
            End Select
        End If
        Return DateAdd(DateInterval.Day, days, start)
    End Function

    Private Sub UpdateTotals()
        dtTotals = PurchasesReportRow.GetVendors(DB, dbPurchasesReport.PurchasesReportID)
    End Sub

    Private Function UpdatePurchases(Optional ByVal VendorID As Integer = Nothing) As Double
        m_dtPurchases = PurchasesReportRow.GetPurchases(DB, dbPurchasesReport.PurchasesReportID)
        m_dvPurchases = m_dtPurchases.DefaultView
        m_dvPurchases.Sort = "VendorID"

        Return m_dtPurchases.AsEnumerable.Where(Function(row) Core.GetInt(row("VendorID")) = VendorID).Select(Of Double)(Function(row) Core.GetDouble(row("POAmount"))).DefaultIfEmpty.Aggregate(Function(sum, add) sum + add)
    End Function

    Protected Sub BindReported()
        Keys.Clear()
        Dim q = (From row As DataRow In dtTotals.AsEnumerable Join vendor As DataRow In dtVendors.AsEnumerable On row("VendorID") Equals vendor("VendorID") Join id As Integer In VendorIds On row("VendorID") Equals id Select New With {.VendorID = id, .TotalAmount = row("TotalAmount"), .CompanyName = vendor("CompanyName")}).OrderBy(Function(key) key.CompanyName)
        If q.Count > 0 Then
            rptReported.DataSource = q
        End If
        rptReported.DataBind()
    End Sub

    Protected Sub BindUnreported()
        Dim q = (From vendor As DataRow In dtVendors.AsEnumerable Join id In VendorIds On vendor("VendorID") Equals id Where Not (From total As DataRow In dtTotals.AsEnumerable Select total("VendorID")).Contains(vendor("VendorID")) Select vendor).OrderBy(Function(key) key("CompanyName"))
        If q.Count > 0 Then
            rptUnreported.DataSource = q
        End If
        rptUnreported.DataBind()
    End Sub

    Protected Sub hdnPostback_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles hdnPostback.ValueChanged
        Dim filter As String = txtVendorFilter.Text
        VendorIds.Clear()
        VendorIds.AddRange((From vendor As DataRow In dtVendors.AsEnumerable Where Left(vendor("CompanyName"), Math.Min(filter.Length, CStr(vendor("CompanyName")).Length)).ToLower = filter.ToLower Select vendor("VendorID")).Cast(Of Integer).DefaultIfEmpty)
        BindReported()
        BindUnreported()
        upReported.Update()
        upUnreported.Update()
    End Sub

    Protected Sub rptUnreported_ItemCommand(ByVal source As Object, ByVal e As System.Web.UI.WebControls.RepeaterCommandEventArgs) Handles rptUnreported.ItemCommand
        Dim dbTotal As PurchasesReportVendorTotalAmountRow = PurchasesReportVendorTotalAmountRow.GetRow(DB, dbPurchasesReport.PurchasesReportID, e.CommandArgument)
        Dim txtTotal As TextBox = e.Item.FindControl("txtTotal")
        If txtTotal.Text <> Nothing Then
            Dim cleaned As String = Regex.Replace(txtTotal.Text, "[^\d.]", "")
            If cleaned <> Nothing Then
                dbTotal.TotalAmount = cleaned
                If dbTotal.Created = Nothing Then
                    dbTotal.CreatorBuilderAccountID = Session("BuilderAccountId")
                    dbTotal.Insert()
                End If
            End If
        End If
        UpdateTotals()
        UpdatePurchases()
        BindReported()
        BindUnreported()
        upUnreported.Update()
        upReported.Update()
    End Sub

    Protected Sub rptUnreported_ItemDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.RepeaterItemEventArgs) Handles rptUnreported.ItemDataBound
        CType(e.Item.FindControl("ltlVendor"), Literal).Text = e.Item.DataItem("CompanyName")
        Dim btn As Button = e.Item.FindControl("btnSaveVendor")
        ScriptManager.GetCurrent(Page).RegisterAsyncPostBackControl(btn)
    End Sub

    Protected Sub rblQuarter_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles rblQuarter.SelectedIndexChanged
        Dim period As String() = rblQuarter.SelectedValue.Split("/")
        ReportQuarter = period(0)
        ReportYear = period(1)

        dbPurchasesReport = PurchasesReportRow.GetPurchasesReportByPeriod(DB, Session("BuilderId"), ReportYear, ReportQuarter)
        If dbPurchasesReport.Created = Nothing Then
            dbPurchasesReport.PeriodYear = ReportYear
            dbPurchasesReport.PeriodQuarter = ReportQuarter
            dbPurchasesReport.BuilderID = Session("BuilderId")
            dbPurchasesReport.CreatorBuilderAccountID = Session("BuilderAccountID")
            dbPurchasesReport.SubmitterBuilderAccountID = Session("BuilderAccountID")
            dbPurchasesReport.Insert()
        End If
        UpdateTotals()
        UpdatePurchases()

        If ResponseDeadline >= Now And ReportQuarter = LastQuarter Then
            pSubmit.Visible = True
            If dbPurchasesReport.Submitted = Nothing Then
                EditMode = True
            Else
                EditMode = False
            End If
        Else
            If ReportQuarter = CurrentQuarter Then
                EditMode = True
            Else
                EditMode = False
            End If
            pSubmit.Visible = False
        End If

        BindReported()
        BindUnreported()
        upReported.Update()
        upUnreported.Update()
    End Sub

    Protected Sub rptReported_ItemCommand(ByVal source As Object, ByVal e As System.Web.UI.WebControls.RepeaterCommandEventArgs) Handles rptReported.ItemCommand
        Select Case e.CommandName
            Case "Edit"
                EditIndex = e.Item.ItemIndex

            Case "Delete"
                Dim dbTotal As PurchasesReportVendorTotalAmountRow = PurchasesReportVendorTotalAmountRow.GetRow(DB, dbPurchasesReport.PurchasesReportID, e.CommandArgument)
                dbTotal.Remove()

                dvPurchases.RowFilter = "VendorID=" & e.CommandArgument
                For Each row As DataRowView In dvPurchases
                    PurchasesReportVendorPORow.RemoveRow(DB, row("PurchasesReportVendorPOID"))
                Next
                UpdateTotals()
                UpdatePurchases()

            Case "Save"
                Page.Validate(e.Item.UniqueID)
                If Not Page.IsValid Then
                    RenderErrors()
                    Exit Sub
                End If

                Dim dbTotal As PurchasesReportVendorTotalAmountRow = PurchasesReportVendorTotalAmountRow.GetRow(DB, dbPurchasesReport.PurchasesReportID, e.CommandArgument)
                dbTotal.TotalAmount = Regex.Replace(DirectCast(e.Item.FindControl("txtTotal"), TextBox).Text, "[^\d.]", "")
                If dbTotal.Created <> Nothing Then
                    dbTotal.Update()
                Else
                    dbTotal.VendorID = e.CommandArgument
                    dbTotal.CreatorBuilderAccountID = Session("BuilderAccountID")
                    dbTotal.PurchasesReportID = dbPurchasesReport.PurchasesReportID
                    dbTotal.Insert()
                End If
                UpdateTotals()
                EditIndex = -1

            Case "Cancel"
                EditIndex = -1

            Case "AddPurchase"
                Dim dbPurchase As New PurchasesReportVendorPORow(DB)
                dbPurchase.PurchasesReportID = dbPurchasesReport.PurchasesReportID
                dbPurchase.VendorID = e.CommandArgument
                dbPurchase.POAmount = 0
                dbPurchase.CreatorBuilderAccountID = Session("BuilderAccountId")
                dbPurchase.Insert()
                UpdatePurchases()
                PurchaseEditID = dbPurchase.PurchasesReportVendorPOID
        End Select
        BindUnreported()
        upUnreported.Update()
        BindReported()
    End Sub

    Protected Sub rptReported_ItemCreated(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.RepeaterItemEventArgs) Handles rptReported.ItemCreated
        If e.Item.ItemType <> ListItemType.AlternatingItem And e.Item.ItemType <> ListItemType.Item Then
            Exit Sub
        End If
        Keys.Add(DataBinder.Eval(e.Item.DataItem, "VendorID"))
        Dim rptPurchases As Repeater = e.Item.FindControl("rptPurchases")
        AddHandler rptPurchases.ItemDataBound, AddressOf rptPurchases_ItemDataBound
        AddHandler rptPurchases.ItemCommand, AddressOf rptPurchases_ItemCommand
    End Sub

    Protected Sub rptReported_ItemDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.RepeaterItemEventArgs) Handles rptReported.ItemDataBound
        If e.Item.ItemType <> ListItemType.AlternatingItem And e.Item.ItemType <> ListItemType.Item Then
            Exit Sub
        End If

        Dim spanTotal As HtmlGenericControl = e.Item.FindControl("spanTotal")
        Dim txtTotal As TextBox = e.Item.FindControl("txtTotal")

        Dim btnEdit As Button = e.Item.FindControl("btnEdit")
        Dim btnDelete As Button = e.Item.FindControl("btnDelete")
        Dim btnSave As Button = e.Item.FindControl("btnSave")
        Dim btnCancel As Button = e.Item.FindControl("btnCancel")
        Dim btnPurchases As HtmlInputButton = e.Item.FindControl("btnPurchases")
        Dim phNoPurchases As PlaceHolder = e.Item.FindControl("phNoPurchases")

        Dim rptPurchases As Repeater = e.Item.FindControl("rptPurchases")

        Dim divPurchases As HtmlGenericControl = e.Item.FindControl("divPurchases")
        Dim hdnPurchasesState As HiddenField = e.Item.FindControl("hdnPurchasesState")
        If Request(hdnPurchasesState.UniqueID) IsNot Nothing AndAlso Request(hdnPurchasesState.UniqueID) = "visible" Then
            divPurchases.Style.Remove("display")
            hdnPurchasesState.Value = "visible"
            btnPurchases.Value = "Hide Purchases"
        Else
            divPurchases.Style.Add("display", "none")
            hdnPurchasesState.Value = "hidden"
        End If

        Dim btnAddPurchase As Button = divPurchases.FindControl("btnAddPurchase")
        btnAddPurchase.Visible = EditMode

        dvPurchases.RowFilter = "VendorID=" & DataBinder.Eval(e.Item.DataItem, "VendorID")
        rptPurchases.DataSource = dvPurchases
        rptPurchases.DataBind()

        Dim POTotal As Double = 0
        If dvPurchases.Count > 0 Then
            POTotal = (From purchase As DataRowView In dvPurchases.OfType(Of DataRowView)() Select purchase("POAmount")).Aggregate(Function(a, b) a + b)
        End If
        If POTotal > CDbl(txtTotal.Text) Then
            Dim div As HtmlGenericControl = e.Item.FindControl("divWarning")
            Dim msg As String = "Purchase Orders for vendor '" & DataBinder.Eval(e.Item.DataItem, "CompanyName") & "' exceed entered total."
            div.InnerHtml = msg
            div.Visible = True
            ScriptManager.RegisterArrayDeclaration(Page, "Warnings", """" & msg & """")
        End If
        phNoPurchases.Visible = (dvPurchases.Count = 0)

        If e.Item.ItemIndex = EditIndex And EditMode Then
            btnEdit.Visible = False
            btnDelete.Visible = False
            btnSave.Visible = True
            btnCancel.Visible = True

            spanTotal.Visible = False
            txtTotal.Visible = True
        Else
            If EditMode Then
                btnEdit.Visible = True

                'must delete invoices before the total
                If dvPurchases.Count = 0 Then
                    btnDelete.Visible = True
                Else
                    btnDelete.Visible = False
                End If
                btnSave.Visible = False
                btnCancel.Visible = False
            Else
                btnEdit.Visible = False
                btnDelete.Visible = False
                btnPurchases.Visible = dvPurchases.Count > 0
                btnSave.Visible = False
                btnCancel.Visible = False
            End If
            txtTotal.Visible = False
            spanTotal.Visible = True
        End If
    End Sub

    Protected Sub rptPurchases_ItemCommand(ByVal sender As Object, ByVal e As RepeaterCommandEventArgs)
        Dim VendorIdx As Integer = CType(CType(sender, Repeater).NamingContainer, RepeaterItem).ItemIndex

        Select Case e.CommandName
            Case "Edit"
                PurchaseEditID = e.CommandArgument
            Case "Delete"
                Dim dbPurchase As PurchasesReportVendorPORow = PurchasesReportVendorPORow.GetRow(DB, e.CommandArgument)
                dbPurchase.Remove()
                Dim dbTotal As PurchasesReportVendorTotalAmountRow = PurchasesReportVendorTotalAmountRow.GetRow(DB, dbPurchasesReport.PurchasesReportID, Keys(VendorIdx))
                dbTotal.TotalAmount = UpdatePurchases(dbPurchase.VendorID())
                dbTotal.Update()
            Case "Save"
                Page.Validate(e.Item.UniqueID)
                If Not Page.IsValid Then
                    RenderErrors()
                    Exit Sub
                End If

                Dim dbPurchase As PurchasesReportVendorPORow = PurchasesReportVendorPORow.GetRow(DB, e.CommandArgument)
                dbPurchase.VendorID = Keys(VendorIdx)
                dbPurchase.POAmount = Regex.Replace(CType(e.Item.FindControl("txtAmount"), TextBox).Text, "[^\d.]", "")
                dbPurchase.PONumber = CType(e.Item.FindControl("txtNumber"), TextBox).Text
                dbPurchase.PODate = CType(e.Item.FindControl("dpDate"), Controls.DatePicker).Value
                dbPurchase.PurchasesReportID = dbPurchasesReport.PurchasesReportID
                If dbPurchase.PurchasesReportVendorPOID = Nothing Then
                    dbPurchase.CreatorBuilderAccountID = Session("BuilderAccountId")
                    dbPurchase.Insert()
                Else
                    dbPurchase.Update()
                End If

                Dim dbTotal As PurchasesReportVendorTotalAmountRow = PurchasesReportVendorTotalAmountRow.GetRow(DB, dbPurchasesReport.PurchasesReportID, Keys(VendorIdx))
                dbTotal.TotalAmount = UpdatePurchases(dbPurchase.VendorID())
                dbTotal.Update()
                PurchaseEditID = -1

            Case "Cancel"
                PurchaseEditID = -1
        End Select
        BindReported()
    End Sub

    Protected Sub rptPurchases_ItemDataBound(ByVal sender As Object, ByVal e As RepeaterItemEventArgs)
        If e.Item.ItemType <> ListItemType.AlternatingItem And e.Item.ItemType <> ListItemType.Item Then
            Exit Sub
        End If

        Dim ltlAmount As Literal = e.Item.FindControl("ltlAmount")
        Dim txtAmount As TextBox = e.Item.FindControl("txtAmount")
        Dim rfvAmount As RequiredFieldValidator = e.Item.FindControl("rfvAmount")
        Dim fvAmount As Controls.CurrencyValidator = e.Item.FindControl("fvAmount")
        Dim ltlNumber As Literal = e.Item.FindControl("ltlNumber")
        Dim txtNumber As TextBox = e.Item.FindControl("txtNumber")
        Dim ltlDate As Literal = e.Item.FindControl("ltlDate")
        Dim dpDate As Controls.DatePicker = e.Item.FindControl("dpDate")
        Dim dvDate As Controls.DateValidator = e.Item.FindControl("dvDate")

        Dim btnEdit As Button = e.Item.FindControl("btnEdit")
        Dim btnSave As Button = e.Item.FindControl("btnSave")
        Dim btnCancel As Button = e.Item.FindControl("btnCancel")
        Dim btnDelete As Button = e.Item.FindControl("btnDelete")

        Dim container As RepeaterItem = CType(sender, Control).NamingContainer
        btnEdit.Visible = EditMode
        btnSave.Visible = EditMode
        btnCancel.Visible = EditMode
        btnDelete.Visible = EditMode

        If Not IsDBNull(e.Item.DataItem("PODate")) Then
            dpDate.Value = e.Item.DataItem("PODate")
            ltlDate.Text = FormatDateTime(e.Item.DataItem("PODate"), DateFormat.ShortDate) & "<br/>"
        End If

        If e.Item.DataItem("PurchasesReportVendorPOID") = PurchaseEditID Then
            ltlAmount.Visible = False
            ltlNumber.Visible = False
            ltlDate.Visible = False

            btnEdit.Visible = False
            btnDelete.Visible = False
        Else
            txtAmount.Visible = False
            rfvAmount.Enabled = False
            fvAmount.Enabled = False
            txtNumber.Visible = False
            dpDate.Visible = False
            dvDate.Enabled = False

            btnSave.Visible = False
            btnCancel.Visible = False
        End If
    End Sub

    Protected Sub btnSubmit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSubmit.Click
        If Not IsValid Then Exit Sub

        SendEditNotices()

        ReportQuarter = LastQuarter
        ReportYear = LastYear
        dbPurchasesReport.Submitted = Nothing
        dbPurchasesReport.SubmitterBuilderAccountID = Nothing
        dbPurchasesReport.Update()

        btnSubmit.Text = "Submit Final Quarter " & LastQuarter & " " & LastYear & " Sales Report"
        EditMode = True

        UpdateTotals()
        UpdatePurchases()
        BindReported()
        BindUnreported()
    End Sub

    Private Sub SendEditNotices()
        'send emails here
    End Sub

    Protected Sub frmConfirm_Callback(ByVal sender As Object, ByVal args As PopupForm.PopupFormEventArgs) Handles frmConfirm.Callback
        If frmConfirm.IsValid Then
            dbPurchasesReport.Submitted = Now
            dbPurchasesReport.SubmitterBuilderAccountID = Session("BuilderAccountID")
            dbPurchasesReport.Update()

            Dim ret As String = "<div style=""padding:25px;font-weight:bold;text-align:center;"">Purchases report submitted for Quarter " & ReportQuarter & ", " & ReportYear
            ret &= "<br /><br /><input type=""button"" value=""Continue"" onclick=""location.href='builder-purchases.aspx';"" class=""btnred"" />"
            frmConfirm.CallbackResult = ret
        End If
    End Sub

    Protected Sub UpdateConfirmMessage()

        frmConfirm.EnsureChildrenCreated()

        Dim q = From vendor As DataRow In dtVendors.AsEnumerable Group Join total As DataRow In dtTotals.AsEnumerable On vendor("VendorID") Equals total("VendorID") Into totals = Group _
                From total In totals.DefaultIfEmpty Select New With {.vendor = vendor("CompanyName"), .total = total}

        Dim reported As String = String.Empty
        Dim unreported As String = String.Empty
        Dim reportedCnt As Integer = 0
        Dim unreportedCnt As Integer = 0
        For Each o As Object In q
            If o.total IsNot Nothing Then
                If reportedCnt Mod 2 = 1 Then
                    reported &= "<tr>"
                Else
                    reported &= "<tr class=""alt"">"
                End If
                reported &= "<td>" & o.vendor & "</td><td>" & FormatCurrency(o.total("TotalAmount")) & "</td></tr>"
                reportedCnt += 1
            Else
                If unreportedCnt Mod 2 = 1 Then
                    unreported &= "<tr>"
                Else
                    unreported &= "<tr class=""alt"">"
                End If
                unreported &= "<td>" & o.vendor & "</td>"
                unreportedCnt += 1
            End If
        Next
        If reported <> String.Empty Then
            reported = "<table cellpadding=""2"" cellspacing=""0"" border=""0"">" & reported & "</table>"
        End If
        If unreported <> String.Empty Then
            unreported = "<table cellpadding=""2"" cellspacing=""0"" border=""0"">" & unreported & "</table>"
        End If
        If ScriptManager.GetCurrent(Page).IsInAsyncPostBack Then
            'Dim json As New System.Web.Script.Serialization.JavaScriptSerializer
            ScriptManager.GetCurrent(Page).RegisterDataItem(frmConfirm, "{'unreported':'" & unreported.Replace("\", "\\").Replace("'", "\'") & "','reported':'" & reported.Replace("\", "\\").Replace("'", "\'") & "'}", True)
        Else
            ltlConfirmReported.InnerHtml = reported
            ltlConfirmUnreported.InnerHtml = unreported
        End If
    End Sub

    Protected Sub Page_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.PreRender
        UpdateConfirmMessage()

        'submit btn full postback to go to edit mode
        If Not EditMode Then
            btnSubmit.OnClientClick = Nothing
        Else
            btnSubmit.OnClientClick = "return OpenConfirm();"
        End If
    End Sub

    Private Sub RenderErrors()
        Dim sm As ScriptManager = ScriptManager.GetCurrent(Page)
        If Not sm.IsInAsyncPostBack Then Exit Sub

        Dim out As New StringBuilder
        Dim sw As New IO.StringWriter(out)
        Dim hw As New HtmlTextWriter(sw)

        Dim eph As MasterPages.ErrorMessage = CType(Page, SitePage).ErrorPlaceHolder
        eph.RenderControl(hw)
        sm.RegisterDataItem(eph, out.ToString)
    End Sub

    Protected Sub btnSaveAll_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSaveAll.Click
        For Each item As RepeaterItem In rptUnreported.Items
            Dim btn As Button = item.FindControl("btnSaveVendor")
            Dim amt As TextBox = item.FindControl("txtTotal")
            If amt.Text <> Nothing Then
                Dim cleaned As String = Regex.Replace(amt.Text, "[^\d.]", "")
                If cleaned <> Nothing Then
                    Dim dbTotal As PurchasesReportVendorTotalAmountRow = PurchasesReportVendorTotalAmountRow.GetRow(DB, dbPurchasesReport.PurchasesReportID, btn.CommandArgument)
                    dbTotal.TotalAmount = cleaned
                    If dbTotal.Created = Nothing Then
                        dbTotal.CreatorBuilderAccountID = Session("BuilderAccountId")
                        dbTotal.Insert()
                    End If
                End If
            End If
        Next
        UpdateTotals()
        UpdatePurchases()
        BindReported()
        BindUnreported()
        upUnreported.Update()
        upReported.Update()
    End Sub
End Class
